<?xml version="1.0"?>
<project name="${project.name}" default="jar" xmlns:ivy="antlib:org.apache.ivy.ant"  basedir=".">

<property file="build.properties"/>

<path id="classpath">
  <fileset dir="${lib.dir}">
    <include name="**/*.jar"/>
    <exclude name="**/*javadoc*"/>
    <exclude name="**/*source*"/>
    <exclude name="**/*test*"/>
  </fileset>
</path>

<ivy:settings file="ivysettings.xml"/>

<target name="clean">
<echo>Cleaning the ${build.dir}</echo>
<delete dir="${war.dir}"/>
<delete dir="${build.dir}"/>
<delete dir="${dist.dir}"/>
</target>
	
<target name="flush">
  <echo>Cleaning the ${lib.dir}</echo>
  <delete dir="${lib.dir}"/>
</target>
	
<target name="cleancache" depends="flush">
  <echo>Cleaning the lib cache</echo>
  <ivy:cleancache/>
</target>

<target name="resolve" description="--> retrieve dependencies with ivy" depends="clean, flush">
	<ivy:retrieve pattern="${ivy.lib.dir}/[conf]/[artifact](-[classifier]).[ext]" conf="default,sources,javadoc"/>
	<ivy:retrieve pattern="${ivy.lib.dir}/test/[conf]/[artifact](-[classifier]).[ext]" conf="testDefault,testSources,testJavadoc"/>
</target>
	
<target name="init" depends="resolve">
<echo>Creating the build directory</echo>
<mkdir dir="${lib.dir}"/>
<mkdir dir="${build.dir}"/>
<mkdir dir="${dist.dir}"/>
</target>

<target name="localTemplateInit">
    <property name="substitution.file" location="local.app.properties"/>
</target>

<target name="devTemplateInit">
    <property name="substitution.file" location="dev.app.properties"/>
</target>

<target name="uatTemplateInit">
    <property name="substitution.file" location="uat.app.properties"/>
</target>

<target name="template">
    <echo message="Building with Env: ${substitution.file}"/>
    <property file="${substitution.file}" prefix="s"/>
    <delete file="${src.dir}/app.properties" quiet="true"/>
    <copy file="app.properties.template" tofile="${src.dir}/app.properties">
        <filterchain>
               <replacetokens>
                   <token key="SERVER_HOST"   value="${s.SERVER_HOST}"/>
                   
                   <token key="DB_DRIVER"   value="${s.DB_DRIVER}"/>
                   <token key="DB_HOST"     value="${s.DB_HOST}"/>
                   <token key="DB_NAME"     value="${s.DB_NAME}"/>
                   <token key="DB_PORT"     value="${s.DB_PORT}"/>
                   <token key="DB_USER"     value="${s.DB_USER}"/>
                   <token key="DB_PASSWORD" value="${s.DB_PASSWORD}"/>
                   
                   <token key="PAYPAL_URL"        value="${s.PAYPAL_URL}"/>
                   <token key="PAYPAL_APIURL"     value="${s.PAYPAL_APIURL}"/>
                   <token key="PAYPAL_USER"       value="${s.PAYPAL_USER}"/>
                   <token key="PAYPAL_PASSWORD"   value="${s.PAYPAL_PASSWORD}"/>
                   <token key="PAYPAL_SIGNATURE"  value="${s.PAYPAL_SIGNATURE}"/>
                   <token key="PAYPAL_VERSION"    value="${s.PAYPAL_VERSION}"/>
                   <token key="PAYPAL_RETURNHOST" value="${s.PAYPAL_RETURNHOST}"/>
                   
                   <token key="MAIL_ENABLED"  value="${s.MAIL_ENABLED}"/>
                   <token key="MAIL_HOST"     value="${s.MAIL_HOST}"/>
                   <token key="MAIL_PORT"     value="${s.MAIL_PORT}"/>
                   <token key="MAIL_USER"     value="${s.MAIL_USER}"/>
                   <token key="MAIL_PASSWORD" value="${s.MAIL_PASSWORD}"/>
                   
                   <token key="PATRONAGE_DONATION" value="${s.PATRONAGE_DONATION}"/>
                   <token key="APP_NAME" value="${s.APP_NAME}"/>
                   <token key="APP_ORGANZATION" value="${s.APP_ORGANZATION}"/>
                   <token key="APP_ORG_URL" value="${s.APP_ORG_URL}"/>
               </replacetokens>
        </filterchain>
    </copy>
</target>

<target name="compile" depends="init">
  <echo>Compile the source files</echo>
  <javac srcdir="${src.dir}" destdir="${build.dir}" debug="true" includeantruntime="false">
  <classpath refid="classpath"/>
  </javac>
  <copy file="${src.dir}/app.properties" tofile="${build.dir}/app.properties" />
</target>

<target name="jar" depends="compile">
<echo>Jar the compiled files</echo>
<pathconvert property="manifest.classpath" pathsep=" ">
  <path refid="classpath"/>
  <mapper>
    <chainedmapper>
      <flattenmapper/>
      <globmapper from="*.jar" to="lib/default/*.jar"/>
    </chainedmapper>
  </mapper>
</pathconvert>	
<jar basedir="${build.dir}" destfile="${dist.dir}/${project.name}.jar">
  <manifest>
    <attribute name="Specification-Title" value="${project.name}" />
    <attribute name="Specification-Version" value="${version.major}.${version.minor}.${version.revision}"/>
    <attribute name="Specification-Vendor" value="dstevens"/>
    <attribute name="Implementation-Title" value="common"/>
    <attribute name="Implementation-Version" value="${version.major}.${version.minor}.${version.revision}"/> 
    <attribute name="Implementation-Vendor" value="dstevens"/>
    <attribute name="Class-Path" value="${manifest.classpath}"/>
  </manifest>
</jar>
</target>
	
<target name="sources-jar" depends="compile">
<echo>Jar the source files</echo>
<jar basedir="${src.dir}" destfile="${dist.dir}/${project.name}-sources.jar" />
</target>

<target name="publish" depends="jar, sources-jar" description="Publish this build into repository">
	<property name="revision" value="${version.major}.${version.minor}.${version.revision}" />
    <ivy:publish 
      artifactspattern="${dist.dir}/[artifact].[ext]"
      overwrite="true"
      resolver="local"
      pubrevision="${revision}"
      status="release" />
</target>

<target name="copy" depends="compile">
	<copy todir="${war.dir}/WEB-INF">
		<fileset dir="${web.dir}/WEB-INF"/>
	</copy>
	<copy todir="${war.dir}/WEB-INF">
		<fileset dir="${src.dir}/resources"/>
	</copy>
	<copy todir="${war.dir}/WEB-INF/classes">
		<fileset dir="${build.dir}"/>
	</copy>
	<copy todir="${war.dir}">
		<fileset dir="${web.dir}"/>
	</copy>
	<copy todir="${war.dir}/WEB-INF/lib" flatten="true">
	  <fileset dir="${lib.dir}">
	    <include name="**/*.jar"/>
	  	<exclude name="**/servlet-api.jar"/>
	    <exclude name="**/*javadoc*"/>
	    <exclude name="**/*source*"/>
	    <exclude name="**/*test*"/>
	  </fileset>
	</copy>
</target>

<available file=".git" type="dir" property="git.present"/>

<target name="git.revision" description="Store git revision in ${repository.version}" if="git.present">
    <exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
        <arg value="describe"/>
        <arg value="--tags"/>
        <arg value="--always"/>
        <arg value="HEAD"/>
    </exec>
    <condition property="repository.version" value="-${git.revision}" else="">
        <and>
            <isset property="git.revision"/>
            <length string="${git.revision}" trim="yes" length="0" when="greater"/>
        </and>
    </condition>
</target>

<target name="war" depends="copy, git.revision">
	<echo>Building the war file</echo>
	<war destfile="${dist.dir}/${project.name}${repository.version}.war" needxmlfile='false'>
	    <manifest>
	      <attribute name="Specification-Title" value="${project.name}" />
	      <attribute name="Specification-Version" value="${version.major}.${version.minor}.${version.revision}"/>
	      <attribute name="Specification-Vendor" value="dstevens"/>
	      <attribute name="Implementation-Title" value="common"/>
	      <attribute name="Implementation-Version" value="${version.major}.${version.minor}.${version.revision}"/> 
	      <attribute name="Implementation-Vendor" value="dstevens"/>
	      <attribute name="Class-Path" value="${manifest.classpath}"/>
	    </manifest>	
		<fileset dir="${war.dir}"/>
	</war>
</target>

<target name="schemaexport">
	<ant antfile="build-schema.xml">
	  <target name="schemaexport" />
	  <target name="create-default-users" />
	</ant>
</target>
	
</project>
